import Config

if System.get_env("DEVBOX") && File.exists?(".env") do
  File.stream!(".env")
  |> Stream.map(&String.trim/1)
  |> Stream.reject(&String.starts_with?(&1, "#"))
  |> Stream.each(fn line ->
    case String.split(line, "=", parts: 2) do
      [k, v] ->
        System.put_env(k, v)
      _ ->
        nil
    end
  end)
  |> Stream.run()
end

# Configure your database
if System.get_env("DEVBOX") do
  {postgres_port, 0} = System.cmd("service_port", ["postgres"])

  config :remit, Remit.Repo,
    username: "postgres",
    password: "dev",
    database: "ex_remit_development",
    hostname: "172.17.0.1",
    port: String.trim(postgres_port),
    show_sensitive_data_on_connection_error: true,
    pool_size: 10
else
  config :remit, Remit.Repo,
    username: System.get_env("USER"),
    password: "",
    database: "remit_dev",
    hostname: "localhost",
    show_sensitive_data_on_connection_error: true,
    pool_size: 10
end

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :remit, RemitWeb.Endpoint,
  http: [
    port: System.get_env("PORT") || 45361,
    protocol_options: [
      idle_timeout: 15_000
    ]
  ],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: [
    node: {RelativePathWatcher, :watch, ["node", [
      "node_modules/webpack/bin/webpack.js",
      "--mode",
      "development",
      "--watch-stdin",
      cd: Path.expand("../assets", __DIR__)
    ]]}
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :remit, RemitWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/remit_web/(live|views)/.*(ex)$",
      ~r"lib/remit_web/templates/.*(eex)$"
    ]
  ]

config :remit,
  favicon: "favicon-dev.png",
  auth_key: "dev",
  webhook_key: "dev",
  github_api_token: {:system, "GITHUB_API_TOKEN", "dev"},
  github_oauth_client_id: {:system, "GITHUB_OAUTH_CLIENT_ID"},
  github_oauth_client_secret: {:system, "GITHUB_OAUTH_CLIENT_SECRET"}

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

config :honeybadger,
  environment_name: :dev,
  api_key: "not-used"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

config :git_hooks,
  auto_install: false,
  hooks: [
    pre_push: [
      tasks: [
        {:cmd, "mix credo -a"}
      ]
    ]
  ]
